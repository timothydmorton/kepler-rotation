#!/Users/tdm/Library/Enthought/Canopy_64bit/User/bin/python
"""

"""
import os
import pprint
import random
import wx

# The recommended way to use wx with mpl is with the WXAgg
# backend. 
#
import matplotlib
matplotlib.use('WXAgg')
from matplotlib.figure import Figure
from matplotlib.backends.backend_wxagg import \
    FigureCanvasWxAgg as FigCanvas, \
    NavigationToolbar2WxAgg as NavigationToolbar

import koiutils as ku
import rotation as rot
import spinorb as so
import numpy as np
from pdfs import kde
import pickle

DATADIR = 'photometry'
QSTART = {}
QSTOP = {}
for line in open('qStartStop.txt'):
    line = line.split()
    if line[0] != 'q':
        QSTART[int(line[0])] = float(line[1])
        QSTOP[int(line[0])] = float(line[2])

ALLKOIS = np.sort(rot.ALLKOIS)

def load_prots(filename='cks_prots.pkl'):
    try:
        fin = open(filename,'rb')
        return pickle.load(fin)
    except IOError:
        return {}

def write_prots(prots,filename='cks_prots.pkl'):
    fout = open(filename,'wb')
    pickle.dump(prots,fout)

class MainFrame(wx.Frame):
    """ The main frame of the application
    """
    title = 'Prot test GUI'
    
    def __init__(self):
        wx.Frame.__init__(self, None, -1, self.title)

        self.nqtrs = 6
        self.allqtrs = np.arange(15) + 1 #Q1-Q15
        self.qtrs = self.allqtrs[np.arange(self.nqtrs)]

        self.read_prot_dict() #sets self.prot_dict
        #print self.prot_dict

        i = 0
        while self.prot_already_selected(ALLKOIS[i]):
            i += 1
            
        self.koi_index = i
        self.koi = ku.koiname(ALLKOIS[i],star=True)
        self.set_koi_info()  #sets self.ncandidates, self.koi_periods, self.koi_teff, self.koi_sparprov

        
        self.npeaks = 5
        self.lookahead = 5 # for peak detection
        self.prot_tolerance = 0.1

        self.get_data()  #sets self.time, self.flux, self.mask, self.peakdata,
                         # and all pgram, acorr, smooth_acorr data
        self.find_best_guesses() # sets self.prot_best_guesses
        #print self.prot_best_guesses

        self.prot_guess = self.prot_best_guesses[0]
        self.order_qtrs() # sets self.qtrs
        
        self.create_menu()
        self.create_status_bar()
        self.create_main_panel()
        
        #self.koi_textbox.SetValue(self.koi)

    def create_menu(self):
        self.menubar = wx.MenuBar()
        
        menu_file = wx.Menu()
        m_expt = menu_file.Append(-1, "&Save plot\tCtrl-S", "Save plot to file")
        self.Bind(wx.EVT_MENU, self.on_save_plot, m_expt)
        menu_file.AppendSeparator()
        m_exit = menu_file.Append(-1, "E&xit\tCtrl-X", "Exit")
        self.Bind(wx.EVT_MENU, self.on_exit, m_exit)
        
        menu_help = wx.Menu()
        m_about = menu_help.Append(-1, "&About\tF1", "About the demo")
        self.Bind(wx.EVT_MENU, self.on_about, m_about)
        
        self.menubar.Append(menu_file, "&File")
        self.menubar.Append(menu_help, "&Help")
        self.SetMenuBar(self.menubar)

    def create_main_panel(self):
        """ Creates the main panel with all the controls on it:

        """
        self.panel = wx.Panel(self)

        self.lcplots = []
        for q in self.qtrs:
            #print 'setting up quarter %i' % q
            w = np.where((self.time >= QSTART[q]) & (self.time <= QSTOP[q])
                         & ~(self.mask))
            self.lcplots.append(LCPlot(self.panel, -1, self.koi, q, self.time[w], self.flux[w], 
                                       prot_guess=self.prot_guess))
        
        self.koi_textbox = wx.TextCtrl(
            self.panel, 
            size=(60,-1),
            style=wx.TE_PROCESS_ENTER)
        self.Bind(wx.EVT_TEXT_ENTER, self.on_enter_koi, self.koi_textbox)
        
        self.getkoi_button = wx.Button(self.panel, -1, "Get KOI")
        self.Bind(wx.EVT_BUTTON, self.on_getkoi_button, self.getkoi_button)

        self.prevkoi_button = wx.Button(self.panel, -1, 'prev')
        self.Bind(wx.EVT_BUTTON, self.on_prevkoi_button, self.prevkoi_button)
        self.nextkoi_button = wx.Button(self.panel, -1, 'next')
        self.Bind(wx.EVT_BUTTON, self.on_nextkoi_button, self.nextkoi_button)

        self.prot_guesses_hbox = wx.BoxSizer(wx.HORIZONTAL)
        self.prot_guess_textbox = wx.TextCtrl(self.panel,size=(50,-1),style=wx.TE_PROCESS_ENTER)
        self.Bind(wx.EVT_TEXT_ENTER, self.on_enter_prot, self.prot_guess_textbox)
        self.prot_guesses_label = wx.StaticText(self.panel, label='')
        self.set_prot_guesses_label()
        self.prot_guesses_hbox.Add(wx.StaticText(self.panel,label='enter prot:'), 0, wx.ALL)
        self.prot_guesses_hbox.Add(self.prot_guess_textbox)
        self.prot_guesses_hbox.AddSpacer(10)
        self.prot_guesses_hbox.Add(self.prot_guesses_label, 0, wx.ALL)

        self.prot_status_hbox = wx.BoxSizer(wx.HORIZONTAL)
        self.current_prot_txt = wx.StaticText(self.panel,label='current prot: %.3g' % self.prot_guess)
        self.prot_status_txt = wx.StaticText(self.panel,label='')
        self.set_prot_status_txt()
        self.prot_unselect_button = wx.Button(self.panel, -1, 'unselect')
        self.Bind(wx.EVT_BUTTON, self.on_prot_unselect, self.prot_unselect_button)
        self.prot_status_hbox.Add(self.current_prot_txt, 0, wx.LEFT | wx.TOP | wx.BOTTOM)
        self.prot_status_hbox.AddSpacer(20)
        self.prot_status_hbox.Add(self.prot_status_txt, 1, wx.LEFT | wx.TOP | wx.BOTTOM)
        #self.prot_status_hbox.AddSpacer(50)
        self.prot_status_hbox.Add(self.prot_unselect_button, 0, wx. LEFT | wx.TOP | wx.BOTTOM)
        self.prot_select_hbox = wx.BoxSizer(wx.HORIZONTAL)
        self.prot_select_good_button = wx.Button(self.panel, -1, 'good')
        self.Bind(wx.EVT_BUTTON, self.on_select_good, self.prot_select_good_button)
        self.prot_select_decent_button = wx.Button(self.panel, -1, 'decent')
        self.Bind(wx.EVT_BUTTON, self.on_select_decent, self.prot_select_decent_button)
        self.prot_select_marginal_button = wx.Button(self.panel, -1, 'marginal')
        self.Bind(wx.EVT_BUTTON, self.on_select_marginal, self.prot_select_marginal_button)
        self.prot_select_poor_button = wx.Button(self.panel, -1, 'poor')
        self.Bind(wx.EVT_BUTTON, self.on_select_poor, self.prot_select_poor_button)
        self.prot_select_none_button = wx.Button(self.panel, -1, 'none')
        self.Bind(wx.EVT_BUTTON, self.on_select_none, self.prot_select_none_button)
        self.prot_select_hbox.Add(wx.StaticText(self.panel,label='select current: '))
        self.prot_select_hbox.Add(self.prot_select_good_button, 0, wx.LEFT | wx.TOP | wx.BOTTOM,
                                  border=2)
        self.prot_select_hbox.Add(self.prot_select_decent_button, 0, wx.LEFT | wx.TOP | wx.BOTTOM,
                                  border=2)
        self.prot_select_hbox.Add(self.prot_select_marginal_button, 0, wx.LEFT | wx.TOP | wx.BOTTOM,
                                  border=2)
        self.prot_select_hbox.Add(self.prot_select_poor_button, 0, wx.LEFT | wx.TOP | wx.BOTTOM,
                                  border=2)
        self.prot_select_hbox.Add(self.prot_select_none_button, 0, wx.LEFT | wx.TOP | wx.BOTTOM,
                                  border=2)


        self.koi_info_hbox = wx.BoxSizer(wx.HORIZONTAL)
        self.koi_info_txt = wx.StaticText(self.panel,label=self.koi_info_string())
        self.koi_info_hbox.Add(self.koi_info_txt, 0, wx.ALL)
        #self.koi_info_hbox.Add(self.prot_status_hbox, 0, wx.ALL)

        self.koi_navigate_hbox = wx.BoxSizer(wx.HORIZONTAL)
        self.koi_navigate_hbox.Add(self.koi_textbox, 0, wx.LEFT | wx.TOP | wx.BOTTOM, border=3)
        self.koi_navigate_hbox.Add(self.getkoi_button, 0, wx.LEFT | wx.TOP | wx.BOTTOM, border=3)
        self.koi_navigate_hbox.AddSpacer(10)
        self.koi_navigate_hbox.Add(self.prevkoi_button, 0, wx.LEFT | wx.TOP | wx.BOTTOM, border=3)
        self.koi_navigate_hbox.Add(self.nextkoi_button, 0, wx.LEFT | wx.TOP | wx.BOTTOM, border=3)

        #self.koi_label = wx.StaticText(self, label=self.koi)
        #
        # Layout with box sizers
        #
        
        self.vbox = wx.BoxSizer(wx.VERTICAL)
        self.flags = wx.LEFT | wx.TOP | wx.RIGHT

        #self.vbox.Add(self.koi_label, 0, self.flags)

        self.vbox.Add(self.koi_navigate_hbox, 0, self.flags, border=5)
        self.vbox.Add(self.prot_status_hbox, 0, self.flags)
        self.vbox.Add(self.prot_guesses_hbox, 0, self.flags, border=3)
        self.vbox.Add(self.prot_select_hbox, 0, self.flags, border=3)
        self.vbox.Add(self.koi_info_hbox, 0, self.flags, border=5)

        for lc in self.lcplots:
            self.vbox.Add(lc, 1, self.flags | wx.EXPAND, border=2)

        #self.vbox.AddSpacer(5)
        #self.vbox.Add(self.control_hbox, 0, self.flags)

        self.panel.SetSizer(self.vbox)
        self.vbox.Fit(self)

    
    def create_status_bar(self):
        self.statusbar = self.CreateStatusBar()

    def set_koi_info(self):
        self.ncandidates = ku.DATA[self.koi]['koi_count']
        self.koi_periods = []
        for i in range(self.ncandidates):
            self.koi_periods.append(ku.DATA[ku.koiname(self.koi,koinum=True)+i*0.01]['koi_period'])
        self.koi_teff = ku.DATA[self.koi]['koi_steff']
        self.koi_sparprov = ku.DATA[self.koi]['koi_sparprov']

    def update_koi_info(self):
        self.koi_info_txt.SetLabel(self.koi_info_string())

    def koi_info_string(self):
        txt = '%s: %i K (%s)  koi periods: ' % (self.koi,self.koi_teff,self.koi_sparprov)
        for per in self.koi_periods:
            txt += '%.3fd ' % per
        return txt

    def get_data(self):
        #print 'getting data for %s' % ku.koiname(self.koi,star=True)
        self.time,self.flux,self.mask = rot.get_tf(self.koi,return_mask=True)
        self.peakdata = rot.get_peakdata(self.koi)

        self.pgram_data = {}
        self.acorr_data = {}
        self.smooth_acorr_data = {}

        self.pgram_pks = {}
        self.acorr_pks = {}
        self.smooth_acorr_pks = {}

        self.pgram_hts = {}
        self.acorr_hts = {}
        self.smooth_acorr_hts = {}

        self.all_pks = []

        for q in self.allqtrs:
            try:
                self.pgram_data[q] = rot.pgram_data(self.koi,q)
                self.acorr_data[q] = rot.acorr_data(self.koi,q)
                self.smooth_acorr_data[q] = rot.smooth_acorr_data(self.koi,q)
            except IOError:
                #print '%s: skipping Q%i' % (self.koi,q)
                continue

            npeaks = self.npeaks

            maxes,mins = rot.peakdetect(self.pgram_data[q][1],
                                        self.pgram_data[q][0],lookahead=self.lookahead)
            maxes = np.array(maxes)
            inds = np.argsort(maxes[:,1])
            self.pgram_pks[q] = maxes[inds,0][-npeaks:][::-1]
            self.pgram_hts[q] = maxes[inds,1][-npeaks:][::-1]
            if len(self.pgram_pks[q]) < npeaks:
                self.pgram_pks[q] = np.concatenate((self.pgram_pks[q],
                                                    np.zeros(npeaks-len(self.pgram_pks[q]))))
                self.pgram_hts[q] = np.concatenate((self.pgram_hts[q],
                                                    np.zeros(npeaks-len(self.pgram_hts[q]))))
        
            maxes,mins = rot.peakdetect(self.acorr_data[q][1],
                                        self.acorr_data[q][0],lookahead=self.lookahead)
            maxes = np.array(maxes)
            inds = np.argsort(maxes[:,1])
            self.acorr_pks[q] = maxes[inds,0][-npeaks:][::-1]
            self.acorr_hts[q] = maxes[inds,1][-npeaks:][::-1]
            if len(self.acorr_pks[q]) < npeaks:
                self.acorr_pks[q] = np.concatenate((self.acorr_pks[q],
                                                    np.zeros(npeaks-len(self.acorr_pks[q]))))
                self.acorr_hts[q] = np.concatenate((self.acorr_hts[q],
                                                    np.zeros(npeaks-len(self.acorr_hts[q]))))
        
            maxes,mins = rot.peakdetect(self.smooth_acorr_data[q][1],
                                        self.smooth_acorr_data[q][0],lookahead=self.lookahead)
            maxes = np.array(maxes)

            if np.size(maxes)==0:
                inds = []
                self.smooth_acorr_pks[q] = []
                self.smooth_acorr_hts[q] = []
            else:
                inds = np.argsort(maxes[:,1])
                self.smooth_acorr_pks[q] = maxes[inds,0][-npeaks:][::-1]
                self.smooth_acorr_hts[q] = maxes[inds,1][-npeaks:][::-1]
            if len(self.smooth_acorr_pks[q]) < npeaks:
                self.smooth_acorr_pks[q] = np.concatenate((self.smooth_acorr_pks[q],
                                                           np.zeros(npeaks-len(self.smooth_acorr_pks[q]))))
                self.smooth_acorr_hts[q] = np.concatenate((self.smooth_acorr_hts[q],
                                                           np.zeros(npeaks-len(self.smooth_acorr_hts[q]))))
            
            self.all_pks = np.concatenate((self.all_pks,self.pgram_pks[q],self.acorr_pks[q],self.smooth_acorr_pks[q]))

        #txt = '['
        #for p in self.all_pks:
        #    txt += '%.3f' % p
        #    txt +=','
        #txt += ']'
        #print txt

    def set_qtrs(self):
        for q,lc in zip(self.qtrs,self.lcplots):
            w = np.where((self.time >= QSTART[q]) & (self.time <= QSTOP[q])
                         & ~(self.mask))
            lc.set_data(self.time[w],self.flux[w])
            lc.set_koi(self.koi,q)


    def approx(self,per,per2=None):
        if per2 is None:
            per2 = self.prot_guess
        return np.absolute(np.log10(per/per2)) < np.log10(1+self.prot_tolerance)

    def order_qtrs(self):
        #determine order of quarters
        hts = np.zeros(len(self.allqtrs))
        pers = np.zeros(len(self.allqtrs))

        #print 'ordering quarters, looking for pgram peaks w/in 10 pct of %.3g' % self.prot_guess 
        for i,q in enumerate(self.allqtrs):
            try:
                iclose = np.argmin(np.absolute(self.prot_guess - self.pgram_pks[q]))
                per = self.pgram_pks[q][iclose]
                if per==0 or not (self.approx(per) or self.approx(per/2.) or self.approx(per*2)):
                    continue
                hts[i] = self.pgram_hts[q][iclose]
                pers[i] = self.pgram_pks[q][iclose]
            except KeyError:
                continue
        if hts.sum() == 0:
            #print 'no pgram peaks w/in 10%; not changing order of quarters'
            return

        inds = hts.argsort()[::-1][:self.nqtrs]
        self.qtrs = self.allqtrs[inds]
        #print 'new order: %s' % self.qtrs
        #print 'heights: %s' % hts[inds]
        #print 'pers: %s' % pers[inds]

    def on_enter_prot(self,event):
        self.set_prot(float(self.prot_guess_textbox.GetValue()))

    def set_prot(self,prot):
        self.prot_guess = prot
        self.current_prot_txt.SetLabel('current prot: %.3g' % self.prot_guess)

        #set prot for each plot
        for lc in self.lcplots:
            lc.set_prot(prot)

        self.order_qtrs()
        self.set_qtrs()
        
    def draw_plots(self):
        """Redraws each lc plot
        """
        for lc in self.lcplots:
            lc.draw_figure()

    def find_best_guesses(self):
        if len(self.all_pks)==0:
            self.prot_best_guesses = [-1]
            return
        k = kde(self.all_pks)
        ps = np.arange(0,50,0.01)
        maxes,mins = rot.peakdetect(k(ps),ps,lookahead=1)
        maxes = np.array(maxes)
        mins = np.array(mins)
        pks = maxes[:,0]
        hts = maxes[:,1]
        inds = np.argsort(hts)[::-1]
        self.prot_best_guesses = pks[inds]
        return
    
        #remove guesses close to KOI period?
        guesses = pks[inds]
        idelete = []
        for i,p in enumerate(guesses):
            for koip in self.koi_periods:
                if self.approx(p,koip):
                    idelete.append(i)
                    print 'guess %.2f too close to koi period %.2f' % (p,koip)
        guesses = np.delete(guesses,idelete)
        self.prot_best_guesses = guesses

    def set_prot_guesses_label(self):
        self.prot_guesses_label.SetLabel('best guesses: %s' % self.prot_best_guesses)

    def set_koi(self,koi):
        self.koi = ku.koiname(koi,star=True)
        self.set_koi_info()
        self.update_koi_info()
        self.get_data()
        if len(self.all_pks) == 0:
            print 'No data for %s' % self.koi
        self.find_best_guesses()
        self.set_prot(self.prot_best_guesses[0])
        self.set_prot_guesses_label()
        self.set_prot_status_txt()
        self.order_qtrs()
        self.set_qtrs()
        self.draw_plots()

    def on_enter_koi(self,event):
        self.set_koi(ku.koiname(self.koi_textbox.GetValue(),star=True))

    def on_getkoi_button(self, event):
        self.on_enter_koi(event)

    def get_koi_index(self):
        ckoi = 'C' + self.koi
        if ALLKOIS[self.koi_index] != ckoi:
            self.koi_index = np.where(ALLKOIS==ckoi)[0][0]
        return self.koi_index

    def on_nextkoi_button(self, event):
        try:
            self.set_koi(ALLKOIS[self.get_koi_index() + 1])
            self.koi_index += 1
        except IndexError:
            raise
            print '%s is last KOI in list' % self.koi
            
    def on_prevkoi_button(self, event):
        try:
            self.set_koi(ALLKOIS[self.get_koi_index() - 1])
            self.koi_index -= 1
        except IndexError:
            raise
            print '%s is first KOI in list' % self.koi

    def set_prot_status_txt(self):
        if self.koi in self.prot_dict:
            p = self.prot_dict[self.koi]['prot_best']
            q = self.prot_dict[self.koi]['quality']
            self.prot_status_txt.SetLabel('selected prot: %.3g (%s)' % (p,q))
            if q=='good':
                self.prot_status_txt.SetForegroundColour('#228B22') # 'forest green'
            elif q=='decent':
                self.prot_status_txt.SetForegroundColour('cyan')
            elif q=='marginal':
                self.prot_status_txt.SetForegroundColour('Gold')
            elif q=='poor':
                self.prot_status_txt.SetForegroundColour('Sienna')
        else:
            self.prot_status_txt.SetLabel('no prot selected')
            self.prot_status_txt.SetForegroundColour('red')
                        
            
    def read_prot_dict(self):
        self.prot_dict = load_prots()

    def on_prot_unselect(self,event):
        self.unselect_prot()

    def unselect_prot(self):
        del self.prot_dict[self.koi]
        write_prots(self.prot_dict)
        self.set_prot_status_txt()

    def select_prot(self,quality):
        d = {}
        d['prot_best'] = self.prot_guess
        d['quality'] = quality
        self.prot_dict[self.koi] = d
        #print self.prot_dict
        write_prots(self.prot_dict)
        self.set_prot_status_txt()
        i = self.get_koi_index() + 1
        while self.prot_already_selected(ALLKOIS[i]):
            i += 1
        self.set_koi(ALLKOIS[i])

    def prot_already_selected(self,koi):
        return ku.koiname(koi,star=True) in self.prot_dict

    def on_select_good(self,event):
        self.select_prot('good')

    def on_select_decent(self,event):
        self.select_prot('decent')

    def on_select_marginal(self,event):
        self.select_prot('marginal')

    def on_select_poor(self,event):
        self.select_prot('poor')

    def on_select_none(self,event):
        self.prot_guess = -1
        self.select_prot('poor')

    def on_pick(self, event):
        # The event received here is of the type
        # matplotlib.backend_bases.PickEvent
        #
        # It carries lots of information, of which we're using
        # only a small amount here.
        # 
        box_points = event.artist.get_bbox().get_points()
        msg = "You've clicked on a bar with coords:\n %s" % box_points
        
        dlg = wx.MessageDialog(
            self, 
            msg, 
            "Click!",
            wx.OK | wx.ICON_INFORMATION)

        dlg.ShowModal() 
        dlg.Destroy()        
    
    def on_save_plot(self, event):
        file_choices = "PNG (*.png)|*.png"
        
        dlg = wx.FileDialog(
            self, 
            message="Save plot as...",
            defaultDir=os.getcwd(),
            defaultFile="plot.png",
            wildcard=file_choices,
            style=wx.SAVE)
        
        if dlg.ShowModal() == wx.ID_OK:
            path = dlg.GetPath()
            self.canvas.print_figure(path, dpi=self.dpi)
            self.flash_status_message("Saved to %s" % path)
        
    def on_exit(self, event):
        self.Destroy()
        
    def on_about(self, event):
        msg = """ A demo using wxPython with matplotlib:
        
         * Use the matplotlib navigation bar
         * Add values to the text box and press Enter (or click "Draw!")
         * Show or hide the grid
         * Drag the slider to modify the width of the bars
         * Save the plot to a file using the File menu
         * Click on a bar to receive an informative message
        """
        dlg = wx.MessageDialog(self, msg, "About", wx.OK)
        dlg.ShowModal()
        dlg.Destroy()
    
    def flash_status_message(self, msg, flash_len_ms=1500):
        self.statusbar.SetStatusText(msg)
        self.timeroff = wx.Timer(self)
        self.Bind(
            wx.EVT_TIMER, 
            self.on_flash_status_off, 
            self.timeroff)
        self.timeroff.Start(flash_len_ms, oneShot=True)
    
    def on_flash_status_off(self, event):
        self.statusbar.SetStatusText('')

class LCPlot(wx.Panel):
    def __init__(self, parent, ID, koi, qtr, ts=None, fs=None,
                 tmin=None, tmax=None, prot_guess=None, npeaks=5, lookahead=5,prot_tolerance=0.1):
        wx.Panel.__init__(self, parent, ID)

        self.prot_guess = prot_guess
        self.prot_tolerance = prot_tolerance

        # Set up the MPL objects
        self.dpi = 100
        self.fig = Figure((5.0,1.0), dpi=self.dpi)
        self.canvas = FigCanvas(self, -1, self.fig)
        self.axes = self.fig.add_axes([0,0,1,1])
        # Bind the 'pick' event for clicking on the plot
        #
        self.toolbar = NavigationToolbar(self.canvas)
        self.toolbar.Realize()
        self.toolbar.update()
        self.toolbar.Hide()
        self.toolbar.pan()

        self.canvas.mpl_connect('pick_event', self.on_pick)

        self.npeaks = npeaks
        self.lookahead = lookahead

        #set up peak info labels
        self.pgram_pk_labels = []
        self.acorr_pk_labels = []
        self.smooth_acorr_pk_labels = []
        self.pgram_pk_hbox = wx.BoxSizer(wx.HORIZONTAL)
        self.acorr_pk_hbox = wx.BoxSizer(wx.HORIZONTAL)
        self.smooth_acorr_pk_hbox = wx.BoxSizer(wx.HORIZONTAL)

        self.pgram_pk_hbox.Add(wx.StaticText(self,label='%9s' % 'pgram:')) 
        self.acorr_pk_hbox.Add(wx.StaticText(self,label='%9s' % 'acorr:')) 
        self.smooth_acorr_pk_hbox.Add(wx.StaticText(self,label='%9s' % 's_acorr:')) 
        
        for i in range(self.npeaks):
            self.pgram_pk_labels.append(wx.StaticText(self,label='n/a'))
            self.pgram_pk_labels[i].Bind(wx.EVT_LEFT_DOWN,self.on_label_click)
            self.pgram_pk_hbox.Add(self.pgram_pk_labels[i], 0, wx.ALL | wx.ALIGN_RIGHT)
            
            self.acorr_pk_labels.append(wx.StaticText(self,label='n/a'))
            self.acorr_pk_labels[i].Bind(wx.EVT_LEFT_DOWN,self.on_label_click)
            self.acorr_pk_hbox.Add(self.acorr_pk_labels[i], 0, wx.ALL | wx.ALIGN_RIGHT)
            
            self.smooth_acorr_pk_labels.append(wx.StaticText(self,label='n/a'))
            self.smooth_acorr_pk_labels[i].Bind(wx.EVT_LEFT_DOWN,self.on_label_click)
            self.smooth_acorr_pk_hbox.Add(self.smooth_acorr_pk_labels[i], 0, wx.ALL | wx.ALIGN_RIGHT)

        self.label = wx.StaticText(self,label='')
        self.set_data(ts,fs,tmin=tmin,tmax=tmax)
        self.set_koi(koi,qtr)

        flags = wx.ALL
        self.peaks_vbox = wx.BoxSizer(wx.VERTICAL)
        self.peaks_vbox.Add(self.pgram_pk_hbox, 0, flags)
        self.peaks_vbox.Add(self.acorr_pk_hbox, 0, flags)
        self.peaks_vbox.Add(self.smooth_acorr_pk_hbox, 0, flags)
        

        #final layout
        self.hbox = wx.BoxSizer(wx.HORIZONTAL)
        self.hbox.Add(self.label, 0, wx.LEFT | wx.RIGHT | wx.ALIGN_CENTER_VERTICAL)
        self.hbox.Add(self.canvas, 1, wx.LEFT | wx.RIGHT | wx.EXPAND)
        self.hbox.Add(self.peaks_vbox, 0, wx.ALIGN_CENTER_VERTICAL)

        self.SetSizer(self.hbox)
        self.hbox.Fit(self)

    def on_label_click(self,event):
        self.GetGrandParent().set_prot(float(event.GetEventObject().GetLabel()))

    def set_prot(self,prot):
        self.prot_guess = prot
        self.set_peaklabels()
        self.set_data_range()
        self.draw_figure()

    def set_koi(self,koi,qtr):
        self.koi = koi
        self.qtr = qtr
        self.title = 'Q%i' % self.qtr
        self.set_peakdata()
        self.set_peaklabels()
        self.label.SetLabel(self.title)

    def set_peakdata(self):
        try:
            self.pgram_data = self.GetGrandParent().pgram_data[self.qtr]
            self.acorr_data = self.GetGrandParent().acorr_data[self.qtr]
            self.smooth_acorr_data = self.GetGrandParent().smooth_acorr_data[self.qtr]

            self.pgram_pks = self.GetGrandParent().pgram_pks[self.qtr]
            self.acorr_pks = self.GetGrandParent().acorr_pks[self.qtr]
            self.smooth_acorr_pks = self.GetGrandParent().smooth_acorr_pks[self.qtr]

            self.pgram_hts = self.GetGrandParent().pgram_hts[self.qtr]
            self.acorr_hts = self.GetGrandParent().acorr_hts[self.qtr]
            self.smooth_acorr_hts = self.GetGrandParent().smooth_acorr_hts[self.qtr]

            return
            #self.pgram_data = rot.pgram_data(self.koi,self.qtr)
            #self.acorr_data = rot.acorr_data(self.koi,self.qtr)
            #self.smooth_acorr_data = rot.smooth_acorr_data(self.koi,self.qtr)
        except KeyError:
            self.nodata = True
            self.pgram_pks = np.zeros(self.npeaks)
            self.acorr_pks = np.zeros(self.npeaks)
            self.smooth_acorr_pks = np.zeros(self.npeaks)

            self.pgram_hts = np.zeros(self.npeaks)
            self.acorr_hts = np.zeros(self.npeaks)
            self.smooth_acorr_hts = np.zeros(self.npeaks)

            return

        npeaks = self.npeaks

        maxes,mins = rot.peakdetect(self.pgram_data[1],self.pgram_data[0],lookahead=self.lookahead)
        maxes = np.array(maxes)
        inds = np.argsort(maxes[:,1])
        self.pgram_pks = maxes[inds,0][-npeaks:][::-1]
        self.pgram_hts = maxes[inds,1][-npeaks:][::-1]
        print 'Q%s: %s' % (self.qtr,self.pgram_hts)
        
        maxes,mins = rot.peakdetect(self.acorr_data[1],self.acorr_data[0],lookahead=self.lookahead)
        maxes = np.array(maxes)
        inds = np.argsort(maxes[:,1])
        self.acorr_pks = maxes[inds,0][-npeaks:][::-1]
        self.acorr_hts = maxes[inds,1][-npeaks:][::-1]
        
        maxes,mins = rot.peakdetect(self.smooth_acorr_data[1],self.smooth_acorr_data[0],lookahead=self.lookahead)
        maxes = np.array(maxes)
        inds = np.argsort(maxes[:,1])
        self.smooth_acorr_pks = maxes[inds,0][-npeaks:][::-1]
        self.smooth_acorr_hts = maxes[inds,1][-npeaks:][::-1]

    def approx(self,per,per2=None):
        if per2 is None:
            per2 = self.prot_guess
        return np.absolute(np.log10(per/per2)) < np.log10(1+self.prot_tolerance)

    def set_peaklabels(self):
        for i,pg,ac,sac in zip(range(self.npeaks),
                               self.pgram_pk_labels,
                               self.acorr_pk_labels,
                               self.smooth_acorr_pk_labels):
            pg.SetLabel('%5.3g' % self.pgram_pks[i])
            ac.SetLabel('%5.3g' % self.acorr_pks[i])
            sac.SetLabel('%5.3g' % self.smooth_acorr_pks[i])
            if self.approx(self.pgram_pks[i]):
                pg.SetForegroundColour('white')
                pg.SetBackgroundColour('blue')
            elif self.approx(self.pgram_pks[i]/2.) or self.approx(self.pgram_pks[i]*2):
                pg.SetForegroundColour('black')
                pg.SetBackgroundColour('green')
            else:
                pg.SetForegroundColour('black')
                pg.SetBackgroundColour('white')

            if self.approx(self.acorr_pks[i]):
                ac.SetForegroundColour('white')
                ac.SetBackgroundColour('blue')
            elif self.approx(self.acorr_pks[i]/2.) or self.approx(self.acorr_pks[i]*2):
                ac.SetForegroundColour('black')
                ac.SetBackgroundColour('green')
            else:
                ac.SetForegroundColour('black')
                ac.SetBackgroundColour('white')

            if self.approx(self.smooth_acorr_pks[i]):
                sac.SetForegroundColour('white')
                sac.SetBackgroundColour('blue')
            elif self.approx(self.smooth_acorr_pks[i]/2.) or self.approx(self.smooth_acorr_pks[i]*2):
                sac.SetForegroundColour('black')
                sac.SetBackgroundColour('green')
            else:
                sac.SetForegroundColour('black')
                sac.SetBackgroundColour('white')

    def draw_figure(self):
        self.axes.clear()
        #w = np.where((self.ts >= self.tmin) & (self.ts <= self.tmax))

        #self.axes.plot(self.ts[w],self.fs[w],lw=1)
        self.axes.plot(self.ts,self.fs,lw=1)

        if len(self.ts) == 0:
            return

        if self.prot_guess is not None:
            #for t in np.arange(self.tmin-np.mod(self.tmin,self.prot_guess),
            #                   self.tmax, self.prot_guess):
            for t in np.arange(self.ts.min()-np.mod(self.ts.min(),self.prot_guess),
                               self.ts.max(), self.prot_guess):
                self.axes.axvline(t, ls=':', color='r', lw=2)

        self.axes.set_xlim((self.tmin,self.tmax))
        self.axes.set_yticks([])
        self.axes.set_xticks([])
        self.canvas.draw()

    def set_data(self,ts,fs,tmin=None,tmax=None):
        self.ts = ts
        self.fs = fs
        self.nodata = len(self.ts)==0

        self.set_data_range(tmin,tmax)

        self.draw_figure()

    def set_data_range(self,tmin=None,tmax=None):
        if len(self.ts)==0:
            self.tmin = 0
            self.tmax = 0
            return
        
        if tmin is not None:
            self.tmin = tmin
        else:
            self.tmin = max(self.ts.min(),self.ts.mean() - 3*self.prot_guess)
        if tmax is not None:
            self.tmax = tmax
        else:
            self.tmax = min(self.ts.max(),self.ts.mean() + 3*self.prot_guess)
        self.draw_figure()

    def on_pick(self,event):
        pass

class QtrControlBox(wx.Panel):
    """ A static box with a radio buttons to choose quarter
    """
    def __init__(self, parent, ID, initval, qtrs=[8,9,10,11,12]):
        wx.Panel.__init__(self, parent, ID)
        
        self.value = initval
        self.qtrs = qtrs
        
        sizer = wx.BoxSizer(wx.HORIZONTAL)

        self.radios = dict()
        q = qtrs[0]
        self.radios[q] = wx.RadioButton(self,-1,label='q%i' % q,style=wx.RB_GROUP)
        self.Bind(wx.EVT_RADIOBUTTON, self.SetVal,id=self.radios[q].GetId())
        sizer.Add(self.radios[q], 0, wx.ALL, 10)
        for q in qtrs[1:]:
            self.radios[q] = wx.RadioButton(self,-1,label='q%i' % q)
            self.Bind(wx.EVT_RADIOBUTTON, self.SetVal,id=self.radios[q].GetId())
            sizer.Add(self.radios[q], 0, wx.ALL, 10)
        
        self.SetSizer(sizer)
        sizer.Fit(self)
    
    def SetVal(self,event):
        for q in self.qtrs:
            if self.radios[q].GetValue():
                self.value = q
                print 'quarter is now %i' % self.value

if __name__ == '__main__':
    app = wx.PySimpleApp()
    app.frame = MainFrame()
    app.frame.Show()
    app.MainLoop()
